#HPC2A
#include <iostream>
#include <omp.h>
void bubble(int *, int);
void swap(int &, int &);
void bubble(int *a, int n)
{
	bool swapped;
	for (int i = 0; i < n - 1; i++)
	{
		swapped = false;
		#pragma omp parallel for shared(a, n, swapped)
		for (int j = 0; j < n - i - 1; j++)
		{
			if (a[j] > a[j + 1])
			{
				#pragma omp critical
				{
					swap(a[j], a[j + 1]);
					swapped = true;
				}
			}
		}
		if (!swapped)
			break; // Array is already sorted
		}
}
void swap(int &a, int &b)
{
	int temp = a;
	a = b;
	b = temp;
}
int main()
{
	int *a, n;
	std::cout << "Enter total number of elements: ";
	std::cin >> n;
	a = new int[n];
	std::cout << "Enter elements: ";
	for (int i = 0; i < n; i++)
	{
		std::cin >> a[i];
	}
	bubble(a, n);
	std::cout << "Sorted array: ";
	for (int i = 0; i < n; i++)
	{
		std::cout << a[i] << " ";
	}
	std::cout << std::endl;
	delete[] a; // Deallocate memory
	return 0;
}


OUTPUT
Enter total number of elements: 5
Enter elements: 2 7 5 1 8
Sorted array: 1 2 5 7 8 



#HPC2B
#include <iostream>
#include <omp.h>
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
 else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        #pragma omp task
        mergeSort(arr, l, m);
        #pragma omp task
        mergeSort(arr, m + 1, r);
        #pragma omp taskwait
        merge(arr, l, m, r);
    }
}
int main() {
    int n;
    std::cout << "Enter the number of elements: ";
    std::cin >> n;
    int arr[n];
    std::cout << "Enter " << n << " elements: ";
    for (int i = 0; i < n; i++)
        std::cin >> arr[i];
    std::cout << "Given array is: ";
    for (int i = 0; i < n; i++)
        std::cout << arr[i] << " ";
    std::cout << std::endl;
    double start = omp_get_wtime();
    #pragma omp parallel
    {
        #pragma omp single
        mergeSort(arr, 0, n - 1);
    }
    double stop = omp_get_wtime();
    std::cout << "Sorted array is: ";
    for (int i = 0; i < n; i++)
        std::cout << arr[i] << " ";
    std::cout << std::endl;
    std::cout << "Time taken: " << stop - start << " seconds" << std::endl;
    return 0;
}

5
2 5 1 6 3
Enter total no. of elements:
Enter 5 elements:
Sorted Elements as follows:
1 2 3 5 6 

